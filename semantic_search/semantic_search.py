# -*- coding: utf-8 -*-
"""semantic search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14s-jHFoG6nRgeAQFMkAey2ZzbeNTNoZa
"""

!pip install evaluate transformers[sentencepiece]
!pip install faiss-gpu-cu12
!pip install -q huggingface_hub
!pip install -q transformers datasets
!pip install -U datasets huggingface_hub fsspec

#log in
from huggingface_hub import notebook_login

notebook_login()

"""# Loading and Preparing the Dataset"""

from datasets import load_dataset

issues_dataset = load_dataset("lewtun/github-issues", split="train")
issues_dataset

#filter out the pull requests
issues_dataset = issues_dataset.filter(
    lambda x: (x["is_pull_request"] == False and len(x["comments"]) > 0)
)

issues_dataset

# grab only the useful headers like title, body, url, comments
columns = issues_dataset.column_names
columns_to_keep = ["title", "body", "html_url", "comments"]
columns_to_remove = set(columns_to_keep).symmetric_difference(columns)
issues_dataset = issues_dataset.remove_columns(columns_to_remove)
issues_dataset

# change format to pandas so we can augment comments w title and body
issues_dataset.set_format("pandas")
df = issues_dataset[:]
df["comments"][0].tolist()
comments_df = df.explode("comments", ignore_index=True)
comments_df.head(4)

# switch back to datset by loading the DataFrame in memory
from datasets import Dataset

comments_dataset = Dataset.from_pandas(comments_df)
comments_dataset

# create a column that contains the number of words per comment
comments_dataset = comments_dataset.map(
    lambda x: {"comment_length": len(x["comments"].split())}
)

# filter out the short irrelevant comments
comments_dataset = comments_dataset.filter(lambda x: x["comment_length"] > 15)
comments_dataset

# we can now concatenate the fields into a new text column
def concatenate_text(examples):
    return {
        "text": examples["title"]
        + " \n "
        + examples["body"]
        + " \n "
        + examples["comments"]
    }


comments_dataset = comments_dataset.map(concatenate_text)

"""# Create Text Embeddings

## we now have all the data preprocessed and stored in memory so we can create embeddings to use in the search
"""

from transformers import AutoTokenizer, AutoModel

model_ckpt = "sentence-transformers/multi-qa-mpnet-base-dot-v1"
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)
model = AutoModel.from_pretrained(model_ckpt)

import torch

device = torch.device("cuda")
model.to(device)

# pool the embeddings
def cls_pooling(model_output):
    return model_output.last_hidden_state[:, 0]

# helper function that tokenizes, puts the tensor into gpu, pass to model, and apply cls pooling
def get_embeddings(text_list):
    encoded_input = tokenizer(
        text_list, padding=True, truncation=True, return_tensors="pt"
    )
    encoded_input = {k: v.to(device) for k, v in encoded_input.items()}
    model_output = model(**encoded_input)
    return cls_pooling(model_output)

# test this pipeline works by feeding in the first entry
embedding = get_embeddings(comments_dataset["text"][0])
embedding.shape

# apply to every row in the corupus
embeddings_dataset = comments_dataset.map(
    lambda x: {"embeddings": get_embeddings(x["text"]).detach().cpu().numpy()[0]}
)

"""# Using FAISS for efficient similarity search"""

# add index data structure
embeddings_dataset.add_faiss_index(column="embeddings")

"""we can now perform queries by doing nearest neighbour lookup"""

question = "How can I load a dataset offline?" #change based on the query
question_embedding = get_embeddings([question]).cpu().detach().numpy()
question_embedding.shape

# compare this tensor with its neighbours
scores, samples = embeddings_dataset.get_nearest_examples(
    "embeddings", question_embedding, k=5
)

import pandas as pd

samples_df = pd.DataFrame.from_dict(samples)
samples_df["scores"] = scores
samples_df.sort_values("scores", ascending=False, inplace=True)

# iterate over the first few examples to see how well it matched
for _, row in samples_df.iterrows():
    print(f"COMMENT: {row.comments}")
    print(f"SCORE: {row.scores}")
    print(f"TITLE: {row.title}")
    print(f"URL: {row.html_url}")
    print("=" * 50)
    print()